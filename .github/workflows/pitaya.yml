name: AI Review

on:
  pull_request:
    types: [opened, ready_for_review]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: Pull request number to review
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  pr-review:
    # Run on:
    # - Manual dispatch
    # - PR events when ready_for_review or opened as nonâ€‘draft
    # - Issue comments only when it's a PR thread, command is /review, and commenter is trusted
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && ((github.event.action == 'ready_for_review') || (github.event.action == 'opened' && github.event.pull_request.draft == false))) ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        (github.event.comment.body == '/review' || startsWith(github.event.comment.body, '/review ')) &&
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
      )
    runs-on: ubuntu-latest
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      OPENROUTER_BASE_URL: https://openrouter.ai/api/v1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve PR context
        env:
          GH_TOKEN: ${{ github.token }}
          PR_FROM_PR: ${{ github.event.pull_request.number }}
          PR_FROM_ISSUE: ${{ github.event.issue.number }}
          PR_FROM_INPUT: ${{ inputs.pr_number }}
        run: |
          set -euo pipefail
          PR_NUMBER="${PR_FROM_PR:-}"
          if [ -z "${PR_NUMBER:-}" ] || [ "$PR_NUMBER" = "null" ]; then
            PR_NUMBER="${PR_FROM_ISSUE:-}"
          fi
          if [ -z "${PR_NUMBER:-}" ] || [ "$PR_NUMBER" = "null" ]; then
            PR_NUMBER="${PR_FROM_INPUT:-}"
          fi
          if [ -z "${PR_NUMBER:-}" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "PR number not provided." >&2
            exit 1
          fi
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          gh api repos/${{ github.repository }}/pulls/${PR_NUMBER} > pr.json
          echo "BASE_REF=$(jq -r '.base.ref' pr.json)" >> $GITHUB_ENV
          echo "HEAD_REF=$(jq -r '.head.ref' pr.json)" >> $GITHUB_ENV

      - name: Check out PR head
        run: |
          set -euo pipefail
          git fetch origin "pull/${PR_NUMBER}/head:pr_head"
          git checkout -B pr_head pr_head

      - name: Fetch all remote branches
        run: git fetch origin "+refs/heads/*:refs/remotes/origin/*"

      - name: Ensure local base branch ref exists
        run: |
          BASE_REF="${BASE_REF:-main}"
          if ! git show-ref --verify --quiet "refs/heads/${BASE_REF}"; then
            git branch --track "${BASE_REF}" "origin/${BASE_REF}" || true
          fi

      - name: Ensure provider key exists
        run: |
          if [ -z "${OPENROUTER_API_KEY:-}" ]; then
            echo "OPENROUTER_API_KEY is not set. Add it to repository secrets." >&2
            exit 2
          fi

      - name: Detect documentation changes
        run: |
          set -euo pipefail
          # Compare PR head against BASE_REF and look for .md/.mdx changes
          CHANGED=$(git diff --name-only "$BASE_REF"...HEAD | grep -E '\.(md|mdx)$' || true)
          if [ -z "$CHANGED" ]; then
            echo "DOCS_CHANGED=false" >> $GITHUB_ENV
            echo "No .md/.mdx changes detected; skipping AI review." >&2
          else
            echo "DOCS_CHANGED=true" >> $GITHUB_ENV
            echo "$CHANGED" | sed 's/^/- /' >&2
          fi

      - name: Set up Python 3.13
        if: env.DOCS_CHANGED == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up uv
        if: env.DOCS_CHANGED == 'true'
        uses: astral-sh/setup-uv@v3

      - name: Checkout Pitaya
        if: env.DOCS_CHANGED == 'true'
        uses: actions/checkout@v4
        with:
          repository: tact-lang/pitaya
          path: pitaya-src

      - name: Install Pitaya deps via uv
        if: env.DOCS_CHANGED == 'true'
        working-directory: pitaya-src
        run: uv sync

      - name: Build agent Docker image
        if: env.DOCS_CHANGED == 'true'
        run: docker build -t pitaya-agents:latest pitaya-src

      - name: Run PR Review
        if: env.DOCS_CHANGED == 'true'
        working-directory: pitaya-src
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          OPENROUTER_BASE_URL: https://openrouter.ai/api/v1
        run: |
          uv run pitaya "Review this pull request" \
            --repo "$GITHUB_WORKSPACE" \
            --base-branch "$BASE_REF" \
            --strategy pr-review \
            -S reviewers=2 \
            -S ci_fail_policy=never \
            -S review_instructions='You are in a TON Documentation repository, reviewing this pull request. You must only focus on documentation content changes, and completely ignore anything unrelated to that. If there are no content changes at all, just finish immediately. Otherwise, conduct a thorough review of the content changes, ensuring they are accurate, clear, and consistent with the style guide located at `contribute/style-guide-extended.md`. You must follow the style guide strictly. For any found issues, you must provide a clear explanation and refer to the relevant section of the style guide. If you are not sure about something, skip it and do not assume anything you do not know.' \
            --plugin codex \
            --model "openai/gpt-5" \
            --no-tui

      - name: Submit GitHub PR Comment
        if: env.DOCS_CHANGED == 'true'
        working-directory: pitaya-src
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          RUN_DIR="$(ls -td results/run_* 2>/dev/null | head -n1)"
          if [ -z "${RUN_DIR:-}" ] || [ ! -d "$RUN_DIR" ]; then
            echo "No results directory found" >&2
            exit 1
          fi

          COMPOSER_META="$(grep -rl '"role": "composer"' "$RUN_DIR/instances" | head -n1)"
          if [ -z "${COMPOSER_META:-}" ]; then
            echo "No composer metadata found in $RUN_DIR" >&2
            exit 1
          fi

          BODY=$(jq -r '.final_message // ""' "$COMPOSER_META")
          VERDICT=$(jq -r '.metrics.pr_review_verdict // ""' "$COMPOSER_META")
          if [ -z "$BODY" ]; then
            echo "Composer final_message is empty" >&2
            exit 1
          fi

          # Prepare issue comment body (prepend verdict line)
          COMMENT_BODY=$(printf "**Verdict:** %s\n\n%s" "${VERDICT:-UNKNOWN}" "$BODY")
          API="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          jq -n --arg body "$COMMENT_BODY" '{body:$body}' > payload.json

          echo "Submitting PR comment..."
          echo "Endpoint: $API"
          echo "Body (first 200 chars):"; echo "$COMMENT_BODY" | head -c 200; echo; echo

          HTTP_CODE=$(curl -sS -o response.json -w "%{http_code}" -X POST "$API" \
               -H "Authorization: Bearer ${GITHUB_TOKEN}" \
               -H "Accept: application/vnd.github+json" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               -H "Content-Type: application/json" \
               -d @payload.json || true)

          echo "GitHub API HTTP: $HTTP_CODE"
          echo "Response body:"; cat response.json || true; echo

          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ] && jq -e '.id' response.json >/dev/null 2>&1; then
            echo "Comment submitted successfully."
          else
            echo "Failed to submit comment (HTTP $HTTP_CODE). See response above." >&2
            exit 1
          fi
